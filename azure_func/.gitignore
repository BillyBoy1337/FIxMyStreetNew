# Arquivos compilados / otimizados / DLL
__pycache__/
*.py[cod]
*$py.class

# Extensões C
*.so

# Distribuição / empacotamento
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Normalmente esses arquivos são escritos por um script Python a partir de um modelo
#  antes do PyInstaller construir o executável, para injetar data/outras informações nele.
*.manifest
*.spec

# Logs do instalador
pip-log.txt
pip-delete-this-directory.txt

# Relatórios de teste unitário / cobertura
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Traduções
*.mo
*.pot

# Arquivos do Django:
*.log
local_settings.py
db.sqlite3

# Arquivos do Flask:
instance/
.webassets-cache

# Arquivos do Scrapy:
.scrapy

# Documentação do Sphinx
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   De acordo com pypa/pipenv#598, é recomendável incluir o Pipfile.lock no controle de versão.
#   No entanto, em caso de colaboração, se houver dependências específicas de plataforma ou
#   dependências sem suporte multiplataforma, o pipenv pode instalar dependências que não funcionam
#   ou não instalar todas as dependências necessárias.
#Pipfile.lock

# Arquivo de agendamento do celery beat
celerybeat-schedule

# Arquivos analisados do SageMath
*.sage.py

# Ambientes
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configurações de projeto do Spyder
.spyderproject
.spyproject

# Configurações de projeto do Rope
.ropeproject

# Documentação do mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Verificador de tipos Pyre
.pyre/

# Artefatos do Azure Functions
bin
obj
appsettings.json
local.settings.json

# Artefatos do Azurite
__blobstorage__
__queuestorage__
__azurite_db*__.json
.python_packages
